@startuml
class SmobUserRepository implements SmobUserDataSource {
  (**LivData** --> replace by **Flow**)
  +profilePicture
  +statusNetApiSmobUserProfilePicture
  +statusNetApiSmobUserDataSync
  **Injected** Dependencies
  -smobUserDao
  -smobUserApi
  -ioDispatcher [= Dispatchers.IO]
  ---
  **DAO**
  +getSmobUsers()
  +getSmobUser()
  +saveSmobUser()
  +deleteAllSmobUsers()
  ---
  **API**
  -getSmobUsersViaApi()
  -getSmobUserViaApi()
  -saveSmobUserViaApi()
  -updateSmobUserViaApi()
  -deleteSmobUserViaApi()
  ---
  +refreshSmobUserDataInDB()
}

frame #Lightblue {
    class netObject <<SmobUserApi>> implements SmobUserApi {
        from Koin Service Locator
        ---
        (netServices)
    }
}

frame #Lightblue {
    class dbObject <<SmobUserDao>> implements SmobUserDao {
        from Koin Service Locator
        ---
        (dbServices)
    }
}
interface SmobUserApi #aliceblue;line:blue;line.dotted;text:blue {
  **API** for the smobUsers table
  [async]
  +getSmobUsers()
  +getSmobUserById()
  +saveSmobUser()
  +updateSmobUserById()
  +deleteSmobUserById()
}

interface SmobUserDao #aliceblue;line:blue;line.dotted;text:blue {
  **DAO** for the smobUsers table
  [async]
  +getSmobUsers()
  +getSmobUser()
  +saveSmobUser()
  +deleteAllSmobUsers()
}

interface SmobUserDataSource #aliceblue;line:blue;line.dotted;text:blue {
  **app facing IF**
  [async -- uses data class **SmobUser** as items]
  +getSmobUsers() : Result<List<SmobUser>>
  +getSmobUserById(...) : Result<SmobUser>
  +saveSmobUser(...)
  +updateSmobUserById(...)
  +deleteSmobUserById(...)
  +refreshSmobUserDataInDB()
}

SmobUserRepository <|-left- dbObject : IN (DI: smobUserDao)
SmobUserRepository <|-right- netObject : IN (DI: smobUserApi)
@enduml